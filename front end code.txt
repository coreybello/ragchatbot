import { useState, useEffect, useRef } from 'react';

// --- SVG Icon Components ---
const SendIcon = () => (<svg viewBox="0 0 24 24" className="w-6 h-6 text-white" fill="currentColor"><path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z" /></svg>);
const UserIcon = () => (<svg viewBox="0 0 24 24" className="w-8 h-8 text-gray-500 dark:text-gray-400" fill="currentColor"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" /></svg>);
const BotIcon = () => (<svg viewBox="0 0 24 24" className="w-8 h-8 text-[#6B8DAF]" fill="currentColor"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9.5 16.5a1.5 1.5 0 110-3 1.5 1.5 0 010 3zm5 0a1.5 1.5 0 110-3 1.5 1.5 0 010 3zM12 9a3 3 0 013 3H9a3 3 0 013-3z" /></svg>);
const SunIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" /></svg>);
const MoonIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" /></svg>);
const ChartBarIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" /></svg>);
const ChatAltIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" /></svg>);
const CogIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.096 2.572-1.065z" /><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /></svg>);
const UploadIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" /></svg>);
const DocumentIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" /></svg>);
const TrashIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>);
const RefreshIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h5M20 20v-5h-5M4 4l1.72 1.72a9 9 0 0112.56 0M20 20l-1.72-1.72a9 9 0 00-12.56 0" /></svg>);
const ThumbsUpIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 18.734V11.5a2.5 2.5 0 012.5-2.5h1.118c.345 0 .674.112.946.311.272.2.45.493.5.811v1.882zM7 11.5V9a2 2 0 012-2h2" /></svg>);
const ThumbsDownIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 14H5.236a2 2 0 01-1.789-2.894l3.5-7A2 2 0 018.738 3h4.017c.163 0 .326.02.485.06L17 5.266V12.5a2.5 2.5 0 01-2.5 2.5h-1.118c-.345 0-.674-.112-.946-.311a2.01 2.01 0 00-.5-.811V7.118zM17 12.5V15a2 2 0 01-2 2h-2" /></svg>);
const HistoryIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>);
const PlusIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" /></svg>);
const ClipboardIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V7a2 2 0 00-2-2h-2m-4-1v8m0 0l3-3m-3 3L9 8m-5 5h12.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V19a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2z" /></svg>);
const CheckIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" /></svg>);
const LightbulbIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" /></svg>);
const InfoIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>);

// --- Helper Components ---
const MarkdownRenderer = ({ content }) => {
    const parts = content.split(/(!\[.*?\]\(.*?\))/g);
    return (<div className="prose prose-sm dark:prose-invert max-w-none text-gray-800 dark:text-gray-200">{parts.map((part, index) => {const match = /!\[(.*?)\]\((.*?)\)/.exec(part);if (match) {const [, alt, filename] = match;
        // BACKEND_CONNECTION: The image source URL should point to the static file server on the backend.
        // The backend should expose an endpoint like `/images/{filename}` that serves extracted images.
        const src = `https://placehold.co/600x400/e2e8f0/4a5568?text=${encodeURIComponent(alt || 'Image')}`;
        return (<img key={index} src={src} alt={alt} className="my-3 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 max-w-full" onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/600x400/f87171/ffffff?text=Image+Not+Found'; }} />);}return <span key={index} className="whitespace-pre-wrap">{part}</span>;})}</div>);
};

const Tooltip = ({ text, children }) => (
    <div className="relative flex items-center group">
        {children}
        <div className="absolute left-full top-1/2 -translate-y-1/2 ml-2 w-64 p-2 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10">
            {text}
        </div>
    </div>
);

const ConfirmationModal = ({ isOpen, title, message, onConfirm, onCancel }) => {
    if (!isOpen) return null;
    return (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50">
            <div className="bg-white dark:bg-[#1A2C47] p-6 rounded-xl shadow-2xl w-full max-w-md border border-gray-200 dark:border-[#2A4A6F]">
                <h2 className="text-xl font-bold text-center text-[#0D2C4B] dark:text-white">{title}</h2>
                <p className="text-center text-gray-600 dark:text-gray-300 mt-2">{message}</p>
                <div className="mt-6 flex gap-4">
                    <button onClick={onCancel} className="w-full py-2 rounded-md text-gray-700 dark:text-gray-300 bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors">Cancel</button>
                    <button onClick={onConfirm} className="w-full py-2 rounded-md bg-[#6B8DAF] text-white font-semibold hover:bg-[#5a7d9a] transition-colors">Confirm</button>
                </div>
            </div>
        </div>
    );
};


// --- Child Component: Chat Interface ---
const ChatInterface = ({ onNewQuery, onRateResponse, onNewChat }) => {
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isStreaming, setIsStreaming] = useState(false);
    const [currentBotId, setCurrentBotId] = useState(null);
    const [suggestedQuestions, setSuggestedQuestions] = useState([]);
    const [copiedMessageId, setCopiedMessageId] = useState(null);
    const chatEndRef = useRef(null);

    useEffect(() => { chatEndRef.current?.scrollIntoView({ behavior: 'smooth' }); }, [messages, isStreaming]);
    
    const startNewChat = () => {
        setMessages([{ id: 'init-message', role: 'bot', content: 'Hello! I am the RAG Demo assistant. How can I help you today?', sources: [], images: [], rating: null, suggestions: [] }]);
        setSuggestedQuestions([]);
        onNewChat();
    };

    useEffect(() => { startNewChat(); }, []);
    
    const handleRate = (messageId, rating) => {
        setMessages(prev => prev.map(msg => msg.id === messageId ? {...msg, rating} : msg));
        onRateResponse(messageId, rating);
        // BACKEND_CONNECTION: Log the user's rating for a specific response.
        // This should make a call to an endpoint to store feedback.
        // Endpoint: POST /api/feedback
        // Body: { "message_id": "bot-12345", "rating": "good" }
        console.log(`Rating submitted for ${messageId}: ${rating}`);
    };

    const handleCopyToClipboard = (text) => {
        const tempTextArea = document.createElement('textarea');
        tempTextArea.value = text;
        document.body.appendChild(tempTextArea);
        tempTextArea.select();
        document.execCommand('copy');
        document.body.removeChild(tempTextArea);
        setCopiedMessageId(text);
        setTimeout(() => setCopiedMessageId(null), 2000);
    };

    const handleSend = (query) => {
        if (!query.trim() || isLoading || isStreaming) return;
        const userMessage = { id: `user-${Date.now()}`, role: 'user', content: query };
        setMessages(prev => [...prev, userMessage]);
        setInput('');
        setIsLoading(true);
        setSuggestedQuestions([]);
        
        // BACKEND_CONNECTION: This is the primary interaction with the RAG backend.
        // It should now support streaming responses.
        // Endpoint: POST /api/chat (as per original spec, but with streaming enabled)
        // Request Body: { "query": "How do I reset my password?" }
        // Expected Response: A stream of Server-Sent Events (SSE).
        const botMessageId = `bot-${Date.now()}`;
        setCurrentBotId(botMessageId);
        
        const thinkingMessage = { id: botMessageId, role: 'bot', content: 'Thinking...', sources: [], images: [], rating: null, suggestions: [] };
        setMessages(prev => [...prev, thinkingMessage]);
        
        setTimeout(() => {
            setIsLoading(false);
            setIsStreaming(true);
            const fullResponse = "To reset your password, you need to navigate to the security settings.\n\n1. First, click on your profile icon.\n2. Then, select 'Account Settings'.\n![Screenshot of the account settings menu](account_settings.png)\n3. Go to the 'Security' tab and click 'Reset Password'.\n![The security tab showing the password reset button](security_tab.png)";
            let currentContent = "";
            const interval = setInterval(() => {
                currentContent = fullResponse.substring(0, currentContent.length + 10);
                setMessages(prev => prev.map(msg => msg.id === botMessageId ? { ...msg, content: currentContent } : msg));
                if (currentContent.length >= fullResponse.length) {
                    clearInterval(interval);
                    const finalData = {
                        sources: [{ document: "UserGuide.pdf", page: 23 }, { document: "SecurityFAQ.pdf", page: 5 }],
                        images: ["account_settings.png", "security_tab.png"],
                        suggestions: ["How do I set up 2FA?", "Where can I see my login history?", "What are the password requirements?"]
                    };
                    const finalMessage = { id: botMessageId, role: 'bot', content: fullResponse, ...finalData, rating: null };
                    setMessages(prev => prev.map(msg => msg.id === botMessageId ? finalMessage : msg));
                    setSuggestedQuestions(finalData.suggestions);
                    setIsStreaming(false);
                    setCurrentBotId(null);
                    onNewQuery(botMessageId, query, finalMessage);
                }
            }, 50);
        }, 1000);
    };

    return (<div className="flex flex-col h-full bg-[#F9FAFB] dark:bg-[#0D2C4B]"><header className="p-4 border-b border-gray-200 dark:border-[#2A4A6F] flex justify-between items-center"><h2 className="text-lg font-semibold text-[#0D2C4B] dark:text-white">Chat</h2><button onClick={startNewChat} className="flex items-center gap-2 px-3 py-1.5 rounded-md text-sm font-semibold bg-[#6B8DAF]/20 text-[#0D2C4B] dark:bg-[#F9FAFB]/10 dark:text-white hover:bg-[#6B8DAF]/30"><PlusIcon /> New Chat</button></header><main className="flex-1 overflow-y-auto p-4 md:p-6"><div className="max-w-4xl mx-auto space-y-8">{messages.map((msg) => (<div key={msg.id} className={`flex items-start gap-4 ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>{msg.role === 'bot' && <div className="flex-shrink-0"><BotIcon /></div>}<div className={`flex flex-col max-w-2xl w-full ${msg.role === 'user' ? 'items-end' : 'items-start'}`}><div className={`relative group p-4 rounded-2xl shadow-sm ${msg.role === 'user' ? 'bg-[#6B8DAF] text-white rounded-br-none' : 'bg-white dark:bg-[#1A2C47] text-[#0D2C4B] dark:text-gray-200 rounded-bl-none border border-gray-200 dark:border-[#2A4A6F]'}`}>{msg.role === 'bot' ? <MarkdownRenderer content={msg.content + (isStreaming && msg.id === currentBotId ? '▍' : '')} /> : <p>{msg.content}</p>}{msg.role === 'bot' && msg.content && msg.content !== 'Thinking...' && !isStreaming && (<button onClick={() => handleCopyToClipboard(msg.content)} className="absolute top-2 right-2 p-1.5 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-500 dark:text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity">{copiedMessageId === msg.content ? <CheckIcon /> : <ClipboardIcon />}</button>)}</div>{msg.role === 'bot' && msg.id !== 'init-message' && !isStreaming && msg.content !== 'Thinking...' && (<div className="mt-2 text-xs text-gray-500 dark:text-gray-400 w-full"><div className="flex items-center justify-between"><div className="flex items-center gap-2">{msg.rating === null ? (<><button onClick={() => handleRate(msg.id, 'good')} className="p-1.5 rounded-full hover:bg-green-100 dark:hover:bg-green-900/50 text-gray-400 hover:text-green-600"><ThumbsUpIcon /></button><button onClick={() => handleRate(msg.id, 'bad')} className="p-1.5 rounded-full hover:bg-red-100 dark:hover:bg-red-900/50 text-gray-400 hover:text-red-600"><ThumbsDownIcon /></button></>) : (<p className="font-semibold text-sm">Thank you for your feedback!</p>)}</div>{msg.sources && msg.sources.length > 0 && (<div><strong>Sources:</strong><ul className="list-disc list-inside ml-2">{msg.sources.map((source, i) => <li key={i}>{source.document} (p. {source.page})</li>)}</ul></div>)}</div></div>)}</div>{msg.role === 'user' && <div className="flex-shrink-0"><UserIcon /></div>}</div>))}{isLoading && (<div className="flex items-start gap-4 justify-start"><div className="flex-shrink-0"><BotIcon /></div><div className="p-4 rounded-2xl bg-white dark:bg-[#1A2C47] rounded-bl-none border border-gray-200 dark:border-[#2A4A6F]"><div className="flex items-center space-x-2"><div className="w-2.5 h-2.5 bg-[#6B8DAF] rounded-full animate-pulse"></div><div className="w-2.5 h-2.5 bg-[#6B8DAF] rounded-full animate-pulse [animation-delay:0.2s]"></div><div className="w-2.5 h-2.5 bg-[#6B8DAF] rounded-full animate-pulse [animation-delay:0.4s]"></div></div></div></div>)}<div ref={chatEndRef} /></div></main><footer className="bg-white/80 dark:bg-[#0D2C4B]/80 backdrop-blur-sm p-4"><div className="max-w-4xl mx-auto"><div className="flex gap-2 mb-3 flex-wrap">{suggestedQuestions.map((q, i) => (<button key={i} onClick={() => handleSend(q)} className="px-3 py-1.5 bg-gray-100 dark:bg-gray-700 text-sm rounded-full hover:bg-gray-200 dark:hover:bg-gray-600">{q}</button>))}</div><form onSubmit={(e) => { e.preventDefault(); handleSend(input); }} className="flex items-center gap-3"><input type="text" value={input} onChange={(e) => setInput(e.target.value)} placeholder="Ask a question..." className="flex-1 w-full px-4 py-3 rounded-full bg-gray-100 dark:bg-[#1A2C47] text-[#0D2C4B] dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-[#6B8DAF]" disabled={isLoading || isStreaming} /><button type="submit" className="bg-[#6B8DAF] hover:bg-[#5a7d9a] disabled:bg-slate-400 dark:disabled:bg-slate-700 disabled:cursor-not-allowed text-white p-3 rounded-full transition-all duration-200 shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-[#0D2C4B] focus:ring-[#6B8DAF]" disabled={isLoading || isStreaming || !input.trim()}><SendIcon /></button></form></div></footer></div>);
};

// --- Child Component: Metrics Dashboard ---
const MetricsDashboard = () => {
    // BACKEND_CONNECTION: The data for this dashboard should be fetched from the backend.
    // This could be a single endpoint or multiple.
    // Example: GET /api/metrics
    // Response: { "technical": [...], "user": {...}, "common_queries": [...] }
    const technicalMetrics = [{ name: 'Avg. Response Time', value: '2.8s', target: '<3s', ok: true },{ name: 'Search Accuracy', value: '89%', target: '>85%', ok: true },{ name: 'System Uptime', value: '99.9%', target: '>99%', ok: true },{ name: 'Memory Usage', value: '15.1GB', target: '<16GB', ok: true },];const userMetrics = { questionsToday: 142, satisfaction: 4.6, fallbackRate: '8%' };const commonQueries = [{ query: 'how to reset password', count: 45 }, { query: 'vpn setup guide', count: 28 },{ query: 'add new printer', count: 19 }, { query: 'software request', count: 12 }, { query: 'other', count: 38 },];const maxQueryCount = Math.max(...commonQueries.map(q => q.count));return (<div className="p-4 md:p-8 overflow-y-auto h-full bg-[#F9FAFB] dark:bg-[#0D2C4B]"><div className="max-w-7xl mx-auto space-y-6"><h2 className="text-2xl font-bold text-[#0D2C4B] dark:text-white">Performance Metrics</h2><div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">{technicalMetrics.map(m => (<div key={m.name} className="bg-white dark:bg-[#1A2C47] p-6 rounded-xl shadow-md border border-gray-200 dark:border-[#2A4A6F]"><p className="text-sm font-medium text-gray-500 dark:text-gray-400">{m.name}</p><p className="text-3xl font-bold text-[#0D2C4B] dark:text-white mt-1">{m.value}</p><p className={`text-xs mt-2 font-semibold ${m.ok ? 'text-green-600 dark:text-green-400' : 'text-yellow-600 dark:text-yellow-400'}`}>Target: {m.target}</p></div>))}</div><div className="grid grid-cols-1 lg:grid-cols-5 gap-6"><div className="lg:col-span-2 bg-white dark:bg-[#1A2C47] p-6 rounded-xl shadow-md border border-gray-200 dark:border-[#2A4A6F]"><h3 className="font-bold text-lg text-[#0D2C4B] dark:text-white">User Engagement</h3><div className="grid grid-cols-3 gap-4 mt-4 text-center"><div><p className="text-4xl font-bold text-[#6B8DAF]">{userMetrics.questionsToday}</p><p className="text-sm text-gray-500 dark:text-gray-400">Questions Today</p></div><div><p className="text-4xl font-bold text-[#6B8DAF]">{userMetrics.satisfaction}<span className="text-2xl">/5</span></p><p className="text-sm text-gray-500 dark:text-gray-400">Satisfaction</p></div><div><p className="text-4xl font-bold text-[#6B8DAF]">{userMetrics.fallbackRate}</p><p className="text-sm text-gray-500 dark:text-gray-400">Fallback Rate</p></div></div></div><div className="lg:col-span-3 bg-white dark:bg-[#1A2C47] p-6 rounded-xl shadow-md border border-gray-200 dark:border-[#2A4A6F]"><h3 className="font-bold text-lg text-[#0D2C4B] dark:text-white mb-4">Most Common Queries</h3><div className="space-y-3">{commonQueries.map(item => (<div key={item.query} className="flex items-center text-sm"><p className="w-1/3 truncate text-gray-600 dark:text-gray-300 font-medium">{item.query}</p><div className="w-2/3 bg-gray-200 dark:bg-gray-700 rounded-full h-5"><div className="bg-[#6B8DAF] h-5 rounded-full text-white text-xs flex items-center justify-end pr-2 font-bold" style={{ width: `${(item.count / maxQueryCount) * 100}%` }}>{item.count}</div></div></div>))}</div></div></div></div></div>);};

// --- Child Component: Admin Panel ---
const AdminPanel = ({ indexedDocs, onDocDelete, onIngest, onReIndex, onConfigSave, onPromptSave, onModelConfigSave }) => {
    const [files, setFiles] = useState([]);
    const [isIngesting, setIsIngesting] = useState(false);
    const [ingestStatus, setIngestStatus] = useState('');
    const fileInputRef = useRef(null);
    const [chunkSize, setChunkSize] = useState(512);
    const [chunkOverlap, setChunkOverlap] = useState(50);
    const [systemPrompt, setSystemPrompt] = useState("You are an IT support assistant. Answer using only the provided documentation. Include images using markdown: ![description](filename)");
    const [temperature, setTemperature] = useState(0.7);
    const [topP, setTopP] = useState(1.0);
    const [promptSaveStatus, setPromptSaveStatus] = useState('');
    const [configSaveStatus, setConfigSaveStatus] = useState('');
    const [modelConfigSaveStatus, setModelConfigSaveStatus] = useState('');
    const [confirmation, setConfirmation] = useState({ isOpen: false });

    const handleFileChange = (e) => { if (e.target.files) { setFiles(Array.from(e.target.files)); } };
    const handleIngestClick = async () => { if (files.length === 0) { setIngestStatus('Please select files to ingest.'); return; } setIsIngesting(true); setIngestStatus('Starting ingestion process...'); await onIngest(files, setIngestStatus); setIsIngesting(false); setFiles([]); };
    const handleDeleteDocClick = (docId) => { if (window.confirm("Are you sure you want to delete this document from the knowledge base? This action cannot be undone.")) { onDocDelete(docId); } };
    
    const confirmAndSave = (title, message, onConfirm) => {
        setConfirmation({ isOpen: true, title, message, onConfirm });
    };

    const executeConfirmation = () => {
        if (confirmation.onConfirm) {
            confirmation.onConfirm();
        }
        setConfirmation({ isOpen: false });
    };

    const reIndexAction = () => {
        setIsIngesting(true);
        setIngestStatus('Initiating full knowledge base re-index...');
        // BACKEND_CONNECTION: Call an endpoint to trigger a full re-index of all documents.
        // Endpoint: POST /api/re-index
        onReIndex(setIngestStatus).finally(() => setIsIngesting(false));
    };

    return (
        <div className="p-4 md:p-8 overflow-y-auto h-full bg-[#F9FAFB] dark:bg-[#0D2C4B]">
            <ConfirmationModal 
                isOpen={confirmation.isOpen}
                title={confirmation.title}
                message={confirmation.message}
                onConfirm={executeConfirmation}
                onCancel={() => setConfirmation({ isOpen: false })}
            />
            <div className="max-w-4xl mx-auto space-y-8">
                <div><h2 className="text-2xl font-bold text-[#0D2C4B] dark:text-white">Admin Tools</h2><p className="text-gray-500 dark:text-gray-400 mt-1">Manage the RAG pipeline and documentation.</p></div>
                
                <div className="bg-white dark:bg-[#1A2C47] p-6 rounded-xl shadow-md border border-gray-200 dark:border-[#2A4A6F]"><h3 className="font-bold text-lg text-[#0D2C4B] dark:text-white">Upload New Documentation</h3><div className="mt-4"><input type="file" accept=".pdf" multiple onChange={handleFileChange} ref={fileInputRef} className="hidden" /><button onClick={() => fileInputRef.current.click()} className="flex items-center gap-2 px-4 py-2 rounded-md bg-[#6B8DAF]/20 text-[#0D2C4B] dark:bg-[#F9FAFB]/10 dark:text-white hover:bg-[#6B8DAF]/30"><UploadIcon /><span>{files.length > 0 ? `${files.length} file(s) selected` : 'Select PDFs'}</span></button></div>{files.length > 0 && (<div className="mt-4 space-y-2"><p className="text-sm font-medium text-[#0D2C4B] dark:text-gray-300">Files to upload:</p><ul className="text-sm text-gray-600 dark:text-gray-400 list-disc list-inside">{files.map(file => <li key={file.name}>{file.name}</li>)}</ul></div>)}<div className="mt-6"><button onClick={handleIngestClick} disabled={isIngesting || files.length === 0} className="w-full flex items-center justify-center gap-3 px-6 py-3 rounded-md bg-[#6B8DAF] text-white font-semibold hover:bg-[#5a7d9a] disabled:bg-slate-400 disabled:cursor-not-allowed"> {isIngesting ? 'Processing...' : 'Run Ingestion Pipeline'}</button></div>{ingestStatus && (<p className="mt-4 text-sm text-center text-gray-600 dark:text-gray-300">{ingestStatus}</p>)}</div>
                
                <div className="bg-white dark:bg-[#1A2C47] p-6 rounded-xl shadow-md border border-gray-200 dark:border-[#2A4A6F]"><h3 className="font-bold text-lg text-[#0D2C4B] dark:text-white">Knowledge Base Management</h3><div className="mt-4 flow-root"><ul role="list" className="-my-2 divide-y divide-gray-200 dark:divide-gray-700">{indexedDocs.map((doc) => (<li key={doc.id} className="py-3 flex items-center justify-between"><div className="flex items-center min-w-0"><DocumentIcon /><div className="ml-2"><p className="text-sm font-medium text-[#0D2C4B] dark:text-gray-200 truncate">{doc.name}</p><p className="text-xs text-gray-500 dark:text-gray-400">{doc.size} - Added: {doc.date}</p></div></div><button onClick={() => handleDeleteDocClick(doc.id)} className="p-2 rounded-full hover:bg-red-100 dark:hover:bg-red-900/50 text-gray-500 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-500"><TrashIcon /></button></li>))}</ul></div></div>

                <div className="bg-white dark:bg-[#1A2C47] p-6 rounded-xl shadow-md border border-gray-200 dark:border-[#2A4A6F]"><h3 className="font-bold text-lg text-[#0D2C4B] dark:text-white">System Prompt Configuration</h3><p className="text-sm text-gray-500 dark:text-gray-400 mt-1">Define the chatbot's core instructions and personality.</p><div className="mt-4"><textarea id="system-prompt" rows="4" value={systemPrompt} onChange={(e) => setSystemPrompt(e.target.value)} className="w-full px-3 py-2 rounded-md bg-gray-100 dark:bg-[#0D2C4B] focus:outline-none focus:ring-2 focus:ring-[#6B8DAF] text-sm" /></div><div className="mt-4 flex items-center justify-between"><button onClick={() => confirmAndSave('Save System Prompt', 'Are you sure you want to update the system prompt? This will change the bot\'s behavior for all users.', () => onPromptSave(systemPrompt, setPromptSaveStatus))} className="w-full py-2 rounded-md bg-[#6B8DAF]/20 text-[#0D2C4B] dark:bg-[#F9FAFB]/10 dark:text-white font-semibold hover:bg-[#6B8DAF]/30">Save Prompt</button>{promptSaveStatus && <p className="text-sm text-green-600 dark:text-green-400 ml-4">{promptSaveStatus}</p>}</div></div>

                <div className="bg-white dark:bg-[#1A2C47] p-6 rounded-xl shadow-md border border-gray-200 dark:border-[#2A4A6F]"><h3 className="font-bold text-lg text-[#0D2C4B] dark:text-white">Model Configuration</h3><p className="text-sm text-gray-500 dark:text-gray-400 mt-1">Adjust LLM parameters to control response generation.</p><div className="mt-4 space-y-4"><div><label htmlFor="temperature" className="flex justify-between items-center text-sm font-medium text-gray-600 dark:text-gray-300"><span>Temperature</span><Tooltip text="Controls randomness. Lower values (e.g., 0.2) make the output more focused and deterministic. Higher values (e.g., 1.0) make it more creative."><InfoIcon /></Tooltip><span>{temperature.toFixed(2)}</span></label><input type="range" id="temperature" min="0" max="2" step="0.01" value={temperature} onChange={(e) => setTemperature(parseFloat(e.target.value))} className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700" /></div><div><label htmlFor="top-p" className="flex justify-between items-center text-sm font-medium text-gray-600 dark:text-gray-300"><span>Top-P</span><Tooltip text="An alternative to temperature. A value of 0.9 means the model considers only the tokens making up the top 90% probability mass, cutting off the long tail of low-probability tokens."><InfoIcon /></Tooltip><span>{topP.toFixed(2)}</span></label><input type="range" id="top-p" min="0" max="1" step="0.01" value={topP} onChange={(e) => setTopP(parseFloat(e.target.value))} className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700" /></div></div><div className="mt-4"><button onClick={() => confirmAndSave('Save Model Settings', 'Are you sure you want to update the model parameters?', () => onModelConfigSave({ temperature, topP }, setModelConfigSaveStatus))} className="w-full py-2 rounded-md bg-[#6B8DAF]/20 text-[#0D2C4B] dark:bg-[#F9FAFB]/10 dark:text-white font-semibold hover:bg-[#6B8DAF]/30">Save Model Settings</button>{modelConfigSaveStatus && <p className="text-sm text-green-600 dark:text-green-400 mt-2 text-center">{modelConfigSaveStatus}</p>}</div></div>

                <div className="bg-white dark:bg-[#1A2C47] p-6 rounded-xl shadow-md border border-gray-200 dark:border-[#2A4A6F]"><h3 className="font-bold text-lg text-[#0D2C4B] dark:text-white">Pipeline Configuration</h3><p className="text-sm text-gray-500 dark:text-gray-400 mt-1">Tune parameters for text chunking. Changes will apply on next ingestion.</p><div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4"><div><label htmlFor="chunk-size" className="flex justify-between items-center text-sm font-medium text-gray-600 dark:text-gray-300"><span>Chunk Size (tokens)</span><Tooltip text="The max number of tokens in each text piece sent to the vector DB. Smaller chunks give more specific context but may miss broader themes."><InfoIcon /></Tooltip></label><input type="number" id="chunk-size" value={chunkSize} onChange={(e) => setChunkSize(e.target.value)} className="mt-1 w-full px-3 py-2 rounded-md bg-gray-100 dark:bg-[#0D2C4B] focus:outline-none focus:ring-2 focus:ring-[#6B8DAF]" /></div><div><label htmlFor="chunk-overlap" className="flex justify-between items-center text-sm font-medium text-gray-600 dark:text-gray-300"><span>Chunk Overlap (tokens)</span><Tooltip text="The number of tokens that overlap between consecutive chunks. This helps maintain context and prevents losing information at chunk boundaries."><InfoIcon /></Tooltip></label><input type="number" id="chunk-overlap" value={chunkOverlap} onChange={(e) => setChunkOverlap(e.target.value)} className="mt-1 w-full px-3 py-2 rounded-md bg-gray-100 dark:bg-[#0D2C4B] focus:outline-none focus:ring-2 focus:ring-[#6B8DAF]" /></div></div><div className="mt-4"><button onClick={() => confirmAndSave('Save Pipeline Settings', 'Are you sure? These changes will only apply to new documents ingested into the system.', () => onConfigSave({ chunkSize, chunkOverlap }, setConfigSaveStatus))} className="w-full py-2 rounded-md bg-[#6B8DAF]/20 text-[#0D2C4B] dark:bg-[#F9FAFB]/10 dark:text-white font-semibold hover:bg-[#6B8DAF]/30">Save Settings</button>{configSaveStatus && <p className="text-sm text-green-600 dark:text-green-400 mt-2 text-center">{configSaveStatus}</p>}</div></div>
                
                <div className="bg-red-50 dark:bg-red-900/20 p-6 rounded-xl border border-red-200 dark:border-red-500/30"><h3 className="font-bold text-lg text-red-800 dark:text-red-200">Danger Zone</h3><div className="mt-4 flex items-center justify-between"><div><p className="font-semibold text-red-700 dark:text-red-300">Re-Index Knowledge Base</p><p className="text-sm text-red-600 dark:text-red-400">This will permanently delete all data and re-build from source files.</p></div><button onClick={() => confirmAndSave('Re-Index Knowledge Base', 'DANGER: This will permanently delete all data and re-build from source files. This action cannot be undone. Are you sure you want to continue?', reIndexAction)} className="px-4 py-2 rounded-md bg-red-600 text-white font-semibold hover:bg-red-700 disabled:bg-red-400" disabled={isIngesting}><RefreshIcon className="inline h-5 w-5 mr-1" />Re-Index All</button></div></div>
            </div>
        </div>
    );
};

// --- Child Component: Query History Panel ---
const QueryHistoryPanel = ({ history }) => {
    const getRatingIcon = (rating) => {
        if (rating === 'good') return <div className="flex items-center gap-1 text-green-600 dark:text-green-400"><ThumbsUpIcon /> Good</div>;
        if (rating === 'bad') return <div className="flex items-center gap-1 text-red-600 dark:text-red-500"><ThumbsDownIcon /> Bad</div>;
        return <span className="text-gray-500 dark:text-gray-400">Not Rated</span>;
    };

    return (
        <div className="p-4 md:p-8 overflow-y-auto h-full bg-[#F9FAFB] dark:bg-[#0D2C4B]">
            <div className="max-w-7xl mx-auto">
                <h2 className="text-2xl font-bold text-[#0D2C4B] dark:text-white">Query History</h2>
                <p className="text-gray-500 dark:text-gray-400 mt-1">A log of all user queries and their ratings.</p>
                
                <div className="mt-6 bg-white dark:bg-[#1A2C47] rounded-xl shadow-md border border-gray-200 dark:border-[#2A4A6F] overflow-hidden">
                    <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                            <thead className="bg-gray-50 dark:bg-[#2A4A6F]/50">
                                <tr>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Timestamp</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">User Query</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Bot Response</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Rating</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                                {history.length > 0 ? history.map(item => (
                                    <tr key={item.id}>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">{new Date(item.timestamp).toLocaleString()}</td>
                                        <td className="px-6 py-4 whitespace-normal text-sm text-gray-900 dark:text-gray-200 font-medium">{item.query}</td>
                                        <td className="px-6 py-4 whitespace-normal text-sm text-gray-500 dark:text-gray-400"><p className="line-clamp-2">{item.response.content}</p></td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-semibold">{getRatingIcon(item.rating)}</td>
                                    </tr>
                                )) : (
                                    <tr>
                                        <td colSpan="4" className="px-6 py-12 text-center text-sm text-gray-500 dark:text-gray-400">No queries have been logged yet.</td>
                                    </tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

// --- Child Component: Knowledge Gap Analysis Panel ---
const KnowledgeGapAnalysis = ({ history }) => {
    const [gaps, setGaps] = useState([]);

    useEffect(() => {
        const badResponses = history.filter(item => item.rating === 'bad');
        setGaps(badResponses);
    }, [history]);

    return (
        <div className="p-4 md:p-8 overflow-y-auto h-full bg-[#F9FAFB] dark:bg-[#0D2C4B]">
            <div className="max-w-4xl mx-auto">
                <h2 className="text-2xl font-bold text-[#0D2C4B] dark:text-white">Knowledge Gap Analysis</h2>
                <p className="text-gray-500 dark:text-gray-400 mt-1">Review user queries that were not answered satisfactorily. These may indicate gaps in the knowledge base.</p>

                <div className="mt-6 space-y-4">
                    {gaps.length > 0 ? gaps.map(gap => (
                        <div key={gap.id} className="bg-white dark:bg-[#1A2C47] p-5 rounded-xl shadow-md border border-gray-200 dark:border-[#2A4A6F]">
                            <p className="text-sm text-gray-500 dark:text-gray-400">{new Date(gap.timestamp).toLocaleString()}</p>
                            <p className="mt-2 font-semibold text-gray-800 dark:text-gray-200">
                                <span className="font-normal text-gray-500 dark:text-gray-400">User asked:</span> "{gap.query}"
                            </p>
                            <div className="mt-2 text-sm text-gray-600 dark:text-gray-300 bg-gray-50 dark:bg-gray-800/50 p-3 rounded-md">
                                <p className="font-semibold">Unhelpful Response:</p>
                                <p className="line-clamp-3 italic">"{gap.response.content}"</p>
                            </div>
                            <div className="mt-4">
                                <button className="px-3 py-1.5 text-xs font-semibold rounded-md bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300 hover:bg-yellow-200">
                                    Create Documentation Task
                                </button>
                            </div>
                        </div>
                    )) : (
                        <div className="text-center py-12">
                             <LightbulbIcon className="mx-auto h-12 w-12 text-gray-400" />
                            <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-white">No Gaps Identified</h3>
                            <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">There are no negatively-rated responses to analyze yet.</p>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};


// --- Login Modal Component ---
const LoginModal = ({ onLogin, onClose }) => {
    const [password, setPassword] = useState('');const [error, setError] = useState('');const handleLogin = () => {
        // BACKEND_CONNECTION: Authenticate the admin user.
        if (password === 'admin123') {onLogin();} else {setError('Invalid password.');}};return (<div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50"><div className="bg-white dark:bg-[#1A2C47] p-8 rounded-xl shadow-2xl w-full max-w-sm border border-gray-200 dark:border-[#2A4A6F]"><h2 className="text-2xl font-bold text-center text-[#0D2C4B] dark:text-white">Admin Login</h2><div className="mt-6"><label className="block text-sm font-medium text-gray-600 dark:text-gray-300">Password</label><input type="password" value={password} onChange={(e) => { setPassword(e.target.value); setError(''); }} className="mt-1 block w-full px-4 py-2 rounded-md bg-gray-100 dark:bg-[#0D2C4B] text-[#0D2C4B] dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-[#6B8DAF]" onKeyPress={(e) => e.key === 'Enter' && handleLogin()} /></div>{error && <p className="text-red-500 text-sm text-center mt-2">{error}</p>}<div className="mt-6 flex gap-4"><button onClick={onClose} className="w-full py-2 rounded-md text-gray-700 dark:text-gray-300 bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors">Cancel</button><button onClick={handleLogin} className="w-full py-2 rounded-md bg-[#6B8DAF] text-white font-semibold hover:bg-[#5a7d9a] transition-colors">Login</button></div></div></div>);
};

// --- Main App Component ---
export default function App() {
  const [theme, setTheme] = useState('light');
  const [activeTab, setActiveTab] = useState('chat');
  const [isAdmin, setIsAdmin] = useState(false);
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [queryHistory, setQueryHistory] = useState([]);
  const [indexedDocs, setIndexedDocs] = useState([]);

  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove(theme === 'light' ? 'dark' : 'light');
    root.classList.add(theme);
    document.body.style.backgroundColor = theme === 'light' ? '#F9FAFB' : '#0D2C4B';
  }, [theme]);
  
  useEffect(() => {
      if (isAdmin) {
          // BACKEND_CONNECTION: When an admin logs in, fetch all necessary admin data.
          // Example: GET /api/admin/dashboard-data
          // This could return documents, history, metrics, and current configs all at once.
          setIndexedDocs([
              { id: 1, name: 'UserGuide_v1.2.pdf', size: '2.3 MB', date: '2023-10-26' },
              { id: 2, name: 'SecurityFAQ_Internal.pdf', size: '850 KB', date: '2023-11-05' },
          ]);
      }
  }, [isAdmin]);

  const handleLoginSuccess = () => {setIsAdmin(true);setShowLoginModal(false);setActiveTab('admin');};
  const handleLogout = () => {setIsAdmin(false);setActiveTab('chat');};
  const logNewQuery = (messageId, query, response) => {const newHistoryEntry = {id: messageId,timestamp: Date.now(),query: query,response: response,rating: null,};setQueryHistory(prev => [newHistoryEntry, ...prev]);};
  const handleRateResponse = (messageId, rating) => {setQueryHistory(prev => prev.map(item => item.id === messageId ? { ...item, rating: rating } : item));};
  
  const handleDocDelete = (docId) => {
    // BACKEND_CONNECTION: Call an endpoint to delete a document from the knowledge base.
    // Endpoint: DELETE /api/documents/{docId}
    setIndexedDocs(prev => prev.filter(doc => doc.id !== docId));
  };
  const handleIngest = async (files, setStatus) => { 
    // BACKEND_CONNECTION: Call the ingestion endpoint for each file.
    // Endpoint: POST /api/ingest (multipart/form-data)
    for (const file of files) { setStatus(`Processing ${file.name}...`); await new Promise(resolve => setTimeout(resolve, 1500)); const newDoc = { id: Date.now(), name: file.name, size: `${(file.size / 1024 / 1024).toFixed(1)} MB`, date: new Date().toISOString().split('T')[0] }; setIndexedDocs(prev => [...prev, newDoc]); } setStatus(`✅ Success! ${files.length} document(s) processed.`); 
  };
  const handleReIndex = (setStatus) => {
    // BACKEND_CONNECTION: Call an endpoint to trigger a full re-index.
    // Endpoint: POST /api/re-index
    return new Promise(resolve => setTimeout(() => { setStatus('✅ Full re-index complete.'); resolve(); }, 5000));
  };
  const handleConfigSave = (config, setStatus) => { 
    // BACKEND_CONNECTION: Call an endpoint to update pipeline config.
    // Endpoint: POST /api/config/pipeline
    // Body: { "chunk_size": 512, "chunk_overlap": 50 }
    console.log("Saving config:", config); setStatus('Settings saved!'); setTimeout(() => setStatus(''), 3000); 
  };
  const handlePromptSave = (prompt, setStatus) => { 
    // BACKEND_CONNECTION: Call an endpoint to update the system prompt.
    // Endpoint: POST /api/config/prompt
    // Body: { "prompt": "..." }
    console.log("Saving prompt:", prompt); setStatus('Prompt saved!'); setTimeout(() => setStatus(''), 3000); 
  };
  const handleModelConfigSave = (config, setStatus) => { 
    // BACKEND_CONNECTION: Call an endpoint to update model parameters.
    // Endpoint: POST /api/config/model
    // Body: { "temperature": 0.7, "top_p": 1.0 }
    console.log("Saving model config:", config); setStatus('Model settings saved!'); setTimeout(() => setStatus(''), 3000); 
  };

  const TabButton = ({ tabName, icon, label }) => (<button onClick={() => setActiveTab(tabName)} className={`flex items-center gap-2 px-3 py-1.5 text-sm font-semibold rounded-md transition-colors ${activeTab === tabName ? 'bg-[#6B8DAF]/20 text-[#0D2C4B] dark:bg-[#F9FAFB]/10 dark:text-white' : 'text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white'}`}>{icon}<span>{label}</span></button>);

  return (
    <div className="flex flex-col h-screen font-sans">
      {showLoginModal && <LoginModal onLogin={handleLoginSuccess} onClose={() => setShowLoginModal(false)} />}
      <header className="bg-white dark:bg-[#1A2C47] border-b border-gray-200 dark:border-[#2A4A6F] p-3 shadow-sm flex items-center justify-between flex-shrink-0">
        <div className="flex items-center gap-4">
            <h1 className="text-xl font-bold text-[#0D2C4B] dark:text-white px-2">RAGDEMO</h1>
            <div className="flex items-center gap-1 bg-gray-100 dark:bg-[#0D2C4B] p-1 rounded-lg">
                <TabButton tabName="chat" icon={<ChatAltIcon />} label="Chat" />
                {isAdmin && (<><TabButton tabName="metrics" icon={<ChartBarIcon />} label="Metrics" /><TabButton tabName="admin" icon={<CogIcon />} label="Admin" /><TabButton tabName="history" icon={<HistoryIcon />} label="History" /><TabButton tabName="analysis" icon={<LightbulbIcon />} label="Analysis" /></>)}
            </div>
        </div>
        <div className="flex items-center gap-4">
            {isAdmin ? (<button onClick={handleLogout} className="text-sm font-semibold text-gray-600 dark:text-gray-300 hover:text-[#6B8DAF]">Logout</button>) : (<button onClick={() => setShowLoginModal(true)} className="text-sm font-semibold text-gray-600 dark:text-gray-300 hover:text-[#6B8DAF]">Admin Login</button>)}
            <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')} className="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">{theme === 'light' ? <MoonIcon /> : <SunIcon />}</button>
        </div>
      </header>

      <div className="flex-1 overflow-y-auto">
        {activeTab === 'chat' && <ChatInterface onNewQuery={logNewQuery} onRateResponse={handleRateResponse} onNewChat={() => setQueryHistory([])} />}
        {isAdmin && activeTab === 'metrics' && <MetricsDashboard />}
        {isAdmin && activeTab === 'admin' && <AdminPanel indexedDocs={indexedDocs} onDocDelete={handleDocDelete} onIngest={handleIngest} onReIndex={handleReIndex} onConfigSave={handleConfigSave} onPromptSave={handlePromptSave} onModelConfigSave={handleModelConfigSave} />}
        {isAdmin && activeTab === 'history' && <QueryHistoryPanel history={queryHistory} />}
        {isAdmin && activeTab === 'analysis' && <KnowledgeGapAnalysis history={queryHistory} />}
      </div>
    </div>
  );
}